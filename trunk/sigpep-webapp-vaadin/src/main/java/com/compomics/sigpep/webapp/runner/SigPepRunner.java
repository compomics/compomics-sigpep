package com.compomics.sigpep.webapp.runner;

import com.compomics.sigpep.PeptideGenerator;
import com.compomics.sigpep.SigPepQueryService;
import com.compomics.sigpep.SigPepSession;
import com.compomics.sigpep.analysis.SignatureTransitionFinder;
import com.compomics.sigpep.model.Peptide;
import com.compomics.sigpep.model.ProductIonType;
import com.compomics.sigpep.model.Protease;
import com.compomics.sigpep.model.SignatureTransition;
import com.compomics.sigpep.report.SignatureTransitionMassMatrix;
import com.compomics.sigpep.webapp.MyVaadinApplication;
import com.compomics.sigpep.webapp.bean.SigPepFormBean;
import com.compomics.sigpep.webapp.component.ResultsTable;
import com.google.common.io.Files;
import com.vaadin.ui.*;
import com.vaadin.ui.Label;
import org.apache.log4j.Logger;

import java.awt.*;
import java.io.*;
import java.util.*;
import java.util.List;

/**
 * Created by IntelliJ IDEA.
 * User: niels
 * Date: 22/08/11
 * Time: 10:39
 * To change this template use File | Settings | File Templates.
 */
public class SigPepRunner implements Runnable {
    private static Logger logger = Logger.getLogger(SigPepRunner.class);

    private MyVaadinApplication iMyVaadinApplication;

    public SigPepRunner(MyVaadinApplication aMyVaadinApplication) {
        iMyVaadinApplication = aMyVaadinApplication;
    }

    public void run() {

        SigPepFormBean lSigPepFormBean = iMyVaadinApplication.getSigPepFormBean();
        SigPepSession lSigPepSession = iMyVaadinApplication.getSigPepSession();

        File outputFolder = Files.createTempDir();
        logger.info(outputFolder);

        SigPepQueryService lSigPepQueryService = iMyVaadinApplication.getSigPepSession().createSigPepQueryService();

        Protease aProtease = lSigPepQueryService.getProteaseByShortName(lSigPepFormBean.getProteaseName());

        //create peptide generator for protease
        logger.info("creating peptide generator");
        PeptideGenerator lGenerator = lSigPepSession.createPeptideGenerator(aProtease);

        //get peptides generated by protease
        logger.info("generating lBackgroundPeptides");
        Set<Peptide> lBackgroundPeptides = lGenerator.getPeptides();

        logger.info("generating signature peptides");
        Set<Peptide> lSignaturepeptides = lGenerator.getPeptidesByProteinAccessionAndProteinSequenceLevelDegeneracy(lSigPepFormBean.getProteinAccession(), 1);
        for (Peptide peptide : lSignaturepeptides) {
            logger.info(peptide.getSequenceString());
        }

        //create signature transition finder
        logger.info("creating signature transition finder");

        HashSet lChargeStates = new HashSet();
        lChargeStates.add(2);
        lChargeStates.add(3);

        Set<ProductIonType> lTargetProductIonTypes = new HashSet<ProductIonType>();
        lTargetProductIonTypes.add(ProductIonType.Y);

        Set<ProductIonType> lBackgroundProductIonTypes = new HashSet<ProductIonType>();
        lBackgroundProductIonTypes.add(ProductIonType.Y);
        lBackgroundProductIonTypes.add(ProductIonType.B);

        Set<Integer> lProductIonChargeStates = new HashSet<Integer>();
        lProductIonChargeStates.add(1);

        SignatureTransitionFinder finder = lSigPepSession.createSignatureTransitionFinder(
                lBackgroundPeptides,
                lTargetProductIonTypes,
                lBackgroundProductIonTypes,
                lChargeStates,
                lProductIonChargeStates,
                lSigPepFormBean.getMassAccuracy(),
                lSigPepFormBean.getMinimumCombinationSize(),
                lSigPepFormBean.getMaximumCombinationSize(),
                lSigPepFormBean.getSignatureTransitionFinderType());

        logger.info("finding signature transitions");
        List<SignatureTransition> st = finder.findSignatureTransitions(lSignaturepeptides);

        for (SignatureTransition t : st) {
            logger.info("printing peptide " + t.getPeptide().getSequenceString());
            try {
                OutputStream os = new FileOutputStream(outputFolder.getAbsolutePath() + File.separator + t.getPeptide().getSequenceString() + ".tsv");

                SignatureTransitionMassMatrix m = new SignatureTransitionMassMatrix(t);
                m.write(os);
                os.close();

            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        ArrayList lResultFiles = new ArrayList();
        Collections.addAll(lResultFiles, outputFolder.listFiles(new FileFilter() {
            public boolean accept(File aFile) {
                return aFile.getName().endsWith(".tsv");
            }
        }));

        synchronized (iMyVaadinApplication) {
            iMyVaadinApplication.getMainWindow().addComponent(new ResultsTable(lResultFiles, iMyVaadinApplication, iMyVaadinApplication));
            Enumeration lEnumeration = iMyVaadinApplication.getPropertyNames();
            while(lEnumeration.hasMoreElements()){
                  logger.info("components: " + lEnumeration.nextElement().toString());
            }

        }

        iMyVaadinApplication.push();

    }
}

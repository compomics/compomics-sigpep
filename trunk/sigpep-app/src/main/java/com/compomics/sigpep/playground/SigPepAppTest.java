package com.compomics.sigpep.playground;

import org.apache.log4j.Logger;
import com.compomics.sigpep.*;
import com.compomics.sigpep.analysis.SignatureTransitionFinder;
import com.compomics.sigpep.analysis.SignatureTransitionFinderType;
import com.compomics.sigpep.model.*;
import com.compomics.sigpep.report.SignatureTransitionMassMatrix;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.*;

/**
 * @TODO: JavaDoc missing.
 * <p/>
 * Created by IntelliJ IDEA.<br/>
 * User: mmueller<br/>
 * Date: 03-Jun-2008<br/>
 * Time: 09:57:20<br/>
 */
public class SigPepAppTest {

    private static Logger logger = Logger.getLogger(SigPepAppTest.class);
    //private static String outputFolder = "/Users/hba041/muller_temp/";
    private static String outputFolder = "/Users/kennyhelsens/tmp/sigpep/";

    /**
     * @param args
     * @TODO: JavaDoc missing.
     */
    public static void main(String[] args) {

        Set<ProductIonType> targetProductIonTypes = new HashSet<ProductIonType>();
        targetProductIonTypes.add(ProductIonType.Y);

        Set<ProductIonType> backgroundProductIonTypes = new HashSet<ProductIonType>();
        backgroundProductIonTypes.add(ProductIonType.Y);
        backgroundProductIonTypes.add(ProductIonType.B);

        Set<Integer> productIonChargeStates = new HashSet<Integer>();
        productIonChargeStates.add(1);

        double massAccuracy = 1.5;
        int minimumCombinationSize = 1;
        int maximumCombinationSize = 10;
        SignatureTransitionFinderType type = SignatureTransitionFinderType.MINIMAL;
//
//        int taxonId = 9606;
//        String proteaseShortName = "tryp";
//        String proteinAccession = "ACTB";
//

        //Q6QAQ1	ACTB_PIG
        //Actin, cytoplasmic 1
        // ENSSSCP00000008105
        //ACTB
        //Sus scrofa (Pig)
        // 375
        int taxonId = 9823;
        String proteaseShortName = "tryp";
        String proteinAccession = "ENSSSCP00000008105";

//        int taxonId = 9823;
//        String proteaseShortName = "tryp";
//        String proteinAccession = "YAL027W";
//        String observedChargesInput = "/home/mmueller/data/sigpep/collab_waters/michael_charge_details.tab";

        //get application

        logger.info("locating application");
        SigPepApplication app = ApplicationLocator.getInstance().getApplication();

        //get session factory
        logger.info("creating session");
        SigPepSessionFactory sessionFactory = app.getSigPepSessionFactory();

        //get organism instance for organism
        Organism organism = sessionFactory.getOrganism(taxonId);

        //create session for organism
        SigPepSession session = sessionFactory.createSigPepSession(organism);


        //get query service
        SigPepQueryService service = session.createSigPepQueryService();

        //fetch protease protease instance
        Protease protease = service.getProteaseByShortName(proteaseShortName);
        logger.info(protease);

//        logger.info("Read observed charge states from file " + observedChargesInput + "...");
//        List<Map<Double, Integer>> observedChargeStates = WatersCollaboration.readPeptideChargeStates(observedChargesInput);
//        logger.info(observedChargeStates.size() + " mass charge combinations");
//        //List<Map<Double, Integer>> observedChargeStates = new ArrayList();
//
//        //get protein to find signature transitions for
//        Protein protein = service.getProteinByAccession(proteinAccession);
//        logger.info(protein);
//
//        logger.info("fetching signture peptides");
//        Set<PeptideFeature> signaturePeptideFeatures = service.getSignaturePeptides(protein, protease);
//        for (PeptideFeature feature : signaturePeptideFeatures) {
//            logger.info(feature.getFeatureObject().getSequenceString());
//        }

        //create peptide generator for protease
        logger.info("creating peptide generator");
        PeptideGenerator generator = session.createPeptideGenerator(protease);

        //get peptides generated by protease
        logger.info("generating backgroundPeptides");
        Set<Peptide> backgroundPeptides = generator.getPeptides();

        logger.info("generating signature peptides");
        Set<Peptide> signaturePeptides = generator.getPeptidesByProteinAccessionAndProteinSequenceLevelDegeneracy(proteinAccession, 1);
        for (Peptide peptide : signaturePeptides) {
            logger.info(peptide.getSequenceString());
        }

        //create signature transition finder
        logger.info("creating signature transition finder");

        SignatureTransitionFinder finder = session.createSignatureTransitionFinder(backgroundPeptides,
                SignatureTransitionFinderType.FIRST);

//        SignatureTransitionFinder finder = session.createSignatureTransitionFinder(
//                backgroundPeptides,
//                targetProductIonTypes,
//                backgroundProductIonTypes,
//                observedChargeStates,
//                productIonChargeStates,
//                massAccuracy,
//                minimumCombinationSize,
//                maximumCombinationSize,
//                type);

        logger.info("finding signature transitions");
        List<SignatureTransition> st = finder.findSignatureTransitions(signaturePeptides);


        for (SignatureTransition t : st) {

            try {
                OutputStream os = new FileOutputStream(outputFolder + t.getPeptide().getSequenceString() + ".tsv");

                SignatureTransitionMassMatrix m = new SignatureTransitionMassMatrix(t);
                m.write(os);
                os.close();

            } catch (IOException e) {
                e.printStackTrace();
            }


//            Peptide p = t.getPeptide();
//            StringBuffer log = new StringBuffer();
//            log.append(p.getSequenceString());
//            for (ProductIon pi : t.getProductIons()) {
//                log.append(" ").append(pi.getType()).append(pi.getSequenceLength());
//            }
//            log.append(" ").append(SigPepUtil.round(t.getExclusionScore(), 2));
//            logger.info(log);

        }
    }
}
